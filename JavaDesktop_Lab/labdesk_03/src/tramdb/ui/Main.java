/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tramdb.ui;

import java.sql.Date;
import java.util.List;
import javax.swing.JOptionPane;
import tramdb.daos.MajorDAO;
import tramdb.daos.StudentDAO;
import tramdb.dtos.MajorDTO;
import tramdb.dtos.MajorList;
import tramdb.dtos.StudentDTO;
import tramdb.dtos.StudentList;
import tramdb.utils.MyConnection;

/**
 *
 * @author yiyangqianxi
 */
public class Main extends javax.swing.JFrame {

    boolean newMajor = false;
    boolean newStudent = false;

    MajorModel majorModel;
    MyConnection dbAccess;
    MajorList majorList;
    MajorDAO majorDAO;
    StudentDAO studentDAO;

    StudentModel studentModel;
    StudentList studentList;

    public Main() {
        initComponents();
        txtMajorID.setEditable(false);
        txtID.setEditable(false);

        dbAccess = new MyConnection();

        majorList = new MajorList();
        majorDAO = new MajorDAO();
        studentDAO = new StudentDAO();
        loadMajor();
        majorModel = new MajorModel(majorList);
        tblMajor.setModel(majorModel);

        studentList = new StudentList();
        loadStudent();
        studentModel = new StudentModel(studentList);
        tblStudent.setModel(studentModel);

        for (MajorDTO ma : majorList) {
            cbMajor.addItem(ma.getMajorID() + "-" + ma.getMajorName());
        }
        txtMajorID.setEditable(false);
        txtID.setEditable(false);
    }

    private void loadMajor() {
        try {
            majorList.clear();
            List<MajorDTO> ma = majorDAO.getAllMajors();
            for (MajorDTO major : ma) {
                majorList.add(major);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadStudent() {
        StudentDAO studentDAO = new StudentDAO();
        List<StudentDTO> stu = null;
        try {
            studentList.clear();
            stu = studentDAO.getAllStudent();
            studentList.addAll(stu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMajor = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMajorID = new javax.swing.JTextField();
        txtMajorName = new javax.swing.JTextField();
        btnAddNewMajor = new javax.swing.JButton();
        btnSaveMajor = new javax.swing.JButton();
        btnDeleteMajor = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtDOB = new javax.swing.JTextField();
        btnFindStudent = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cbMajor = new javax.swing.JComboBox<>();
        btnAddNewStu = new javax.swing.JButton();
        btnSaveStu = new javax.swing.JButton();
        btnDeleteStu = new javax.swing.JButton();
        lblStudentManager = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBorder(null);
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tblMajor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMajor.getTableHeader().setReorderingAllowed(false);
        tblMajor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMajorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMajor);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Major's Detail"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Major ID:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Major Name:");

        txtMajorID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtMajorName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnAddNewMajor.setText("Add New");
        btnAddNewMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewMajorActionPerformed(evt);
            }
        });

        btnSaveMajor.setText("Save");
        btnSaveMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMajorActionPerformed(evt);
            }
        });

        btnDeleteMajor.setText("Delete");
        btnDeleteMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMajorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddNewMajor)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMajorID, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMajorName, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btnSaveMajor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteMajor)))
                .addGap(188, 188, 188))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMajorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMajorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewMajor)
                    .addComponent(btnSaveMajor)
                    .addComponent(btnDeleteMajor))
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(205, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Major", jPanel1);

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblStudent.getTableHeader().setReorderingAllowed(false);
        tblStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStudentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblStudent);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Student's Detail"));

        jLabel3.setText("StudentID:");

        jLabel4.setText("Fullname:");

        jLabel5.setText("Phone:");

        jLabel6.setText("Email:");

        jLabel7.setText("Address:");

        jLabel8.setText("DOB:");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane3.setViewportView(txtAddress);

        btnFindStudent.setText("Find by ID");
        btnFindStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindStudentActionPerformed(evt);
            }
        });

        jLabel9.setText("Major:");

        cbMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMajorActionPerformed(evt);
            }
        });

        btnAddNewStu.setText("Add New");
        btnAddNewStu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewStuActionPerformed(evt);
            }
        });

        btnSaveStu.setText("Save");
        btnSaveStu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveStuActionPerformed(evt);
            }
        });

        btnDeleteStu.setText("Delete");
        btnDeleteStu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddNewStu)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(18, 18, 18))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(25, 25, 25)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(37, 37, 37)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(43, 43, 43)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(28, 28, 28))
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(40, 40, 40)))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnSaveStu)
                                .addComponent(cbMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteStu)
                            .addComponent(btnFindStudent))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindStudent))
                .addGap(29, 29, 29)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(26, 26, 26)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewStu)
                    .addComponent(btnSaveStu)
                    .addComponent(btnDeleteStu))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(29, 29, 29)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Student", jPanel2);

        lblStudentManager.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblStudentManager.setText("Student's Manager");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(429, 429, 429)
                .addComponent(lblStudentManager)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(lblStudentManager)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void tblMajorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMajorMouseClicked
        int row = tblMajor.getSelectedRow();
        txtMajorID.setText(majorList.get(row).getMajorID());
        txtMajorName.setText(majorList.get(row).getMajorName());
        txtMajorID.setEditable(false);
        newMajor = false;
    }//GEN-LAST:event_tblMajorMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked

    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void tblStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStudentMouseClicked
        int row = tblStudent.getSelectedRow();
        txtID.setText(studentList.get(row).getStudentID());
        txtName.setText(studentList.get(row).getFullName());
        txtPhone.setText(studentList.get(row).getPhone());
        txtEmail.setText(studentList.get(row).getEmail());
        txtAddress.setText(studentList.get(row).getAddress());
        txtDOB.setText(studentList.get(row).getDateOfBirth().toString());
//        cbMajor.removeAllItems();

        String id = studentList.get(row).getMajorID();
        String name = "";
        try {
            name = majorDAO.findMajorNameByID(id);
//            List<MajorDTO> listMajor =majorDAO.getAllMajors();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

        //check if major is deleted or not
//        boolean IsNotDeleted = false;
//        for (MajorDTO major : majorList) {
//            if (major.getMajorID().equals(id)){
//                IsNotDeleted = true;
//            }
//        }
//        if (!IsNotDeleted){
//            cbMajor.addItem(id + "-" + name);
//        }
        cbMajor.setSelectedItem(id + "-" + name);
        newStudent = false;
        txtID.setEditable(false);
    }//GEN-LAST:event_tblStudentMouseClicked

    private void btnAddNewMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewMajorActionPerformed
        txtMajorID.setEditable(true);
        txtMajorID.setText("");
        txtMajorName.setText("");
        txtMajorID.requestFocus();
        newMajor = true;
    }//GEN-LAST:event_btnAddNewMajorActionPerformed

    private void btnAddNewStuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewStuActionPerformed
        txtID.setEditable(true);
        txtID.setText("");
        txtName.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        txtDOB.setText("");
        txtID.requestFocus();
        cbMajor.setSelectedIndex(0);
        newStudent = true;
    }//GEN-LAST:event_btnAddNewStuActionPerformed

    private void btnDeleteStuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStuActionPerformed
        if (newStudent || txtID.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please select Student to delete");
        } else {
            int delete = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete this Student?", "delete", JOptionPane.YES_NO_OPTION);
            if (delete == JOptionPane.YES_OPTION) {
                try {
                    StudentDAO studentDAO = new StudentDAO();
                    int result = studentDAO.delete(txtID.getText());
                    if (result == 1) {
                        int row = tblStudent.getSelectedRow();
                        studentList.remove(row);
                        tblStudent.updateUI();

                        txtID.setText("");
                        txtName.setText("");
                        txtPhone.setText("");
                        txtEmail.setText("");
                        txtAddress.setText("");
                        txtDOB.setText("");
                        cbMajor.setSelectedIndex(0);
                        JOptionPane.showMessageDialog(rootPane, "Student has been deleted");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnDeleteStuActionPerformed

    private void btnDeleteMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMajorActionPerformed
        if (newMajor || txtMajorID.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please select Major to delete");
        } else {
            try {
                int delete = JOptionPane.showConfirmDialog(rootPane, " Are you sure you want "
                        + "to delete this Major?", "delete", JOptionPane.YES_NO_OPTION);
                if (delete == JOptionPane.YES_OPTION) {

                    if (studentDAO.checkMajorIDTblStudent(txtMajorID.getText())) {

                        int confirm = JOptionPane.showConfirmDialog(this, "This major still has student are learning"
                                + "Do you want delete all student and this major", "Delete", JOptionPane.YES_NO_OPTION);

                        if (confirm == JOptionPane.YES_OPTION) {
                            if (studentDAO.deleteStudentByMajorId(txtMajorID.getText())) {
                                int result = majorDAO.delete(txtMajorID.getText());
                                if (result == 1) {
                                    int row = tblMajor.getSelectedRow();
                                    majorList.remove(row);
                                    tblMajor.updateUI();
                                    txtMajorID.setText("");
                                    txtMajorName.setText("");
                                    JOptionPane.showMessageDialog(rootPane, "Major has been deleted");
                                    // ham load du lieu cua major and ham load vao table
                                    loadMajor();
                                    tblMajor.updateUI();
                                    // load du lieu cua student, ham load vao table
                                    loadStudent();
                                    tblStudent.updateUI();
                                    // set up lai cbbox
                                    cbMajor.removeAllItems();
                                    for (MajorDTO ma : majorList) {
                                        cbMajor.addItem(ma.getMajorID() + "-" + ma.getMajorName());
                                    }

                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Delete fail");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Delete fail");
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "This Major is contain students. Please delete all "
                        + "student in it before you want to delete.");
            }
        }
    }//GEN-LAST:event_btnDeleteMajorActionPerformed

    private void btnSaveMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMajorActionPerformed

        String id = txtMajorID.getText();
        String name = txtMajorName.getText();

        MajorDTO majorDTO = new MajorDTO(name, id);
        MajorDAO majorDAO = new MajorDAO();

        try {
            if (txtMajorID.isEditable()) {
                //save
                if (validMajor()) {
                    majorDAO.insert(majorDTO);
                    JOptionPane.showConfirmDialog(this, "Do you want to save?");
                    loadMajor();
                    tblMajor.updateUI();

                } else {
                    JOptionPane.showMessageDialog(this, "Unable to insert");
                }

            } else {
                //update
                if (validMajorUpdate()) {
                    majorDAO.update(majorDTO.getMajorID(), majorDTO.getMajorName());
                    JOptionPane.showConfirmDialog(this, "Uppdated successfully");
                    loadMajor();
                    tblMajor.updateUI();
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to update");
                }
            }
            cbMajor.removeAllItems();
            for (MajorDTO ma : majorList) {
            cbMajor.addItem(ma.getMajorID() + "-" + ma.getMajorName());
        }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveMajorActionPerformed

    private void btnSaveStuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveStuActionPerformed
        String studentID = txtID.getText();
        String fullName = txtName.getText();
        String phone = txtPhone.getText();
        String email = txtEmail.getText();
        String address = txtAddress.getText();

        Date dateOfBirth = Date.valueOf(txtDOB.getText().trim());

        String majorIDStr = cbMajor.getSelectedItem().toString();
        String majorID = majorIDStr.substring(0, majorIDStr.indexOf("-"));

        boolean isDelete = false;

        StudentDTO studentDTO = new StudentDTO(studentID, fullName, phone, email, address, dateOfBirth, isDelete, majorID);
        StudentDAO studentDAO = new StudentDAO();

        try {
            if (txtID.isEditable()) {
                if (validStu()) {
                    studentDAO.insert(studentDTO);
                    JOptionPane.showConfirmDialog(this, "Do you want to save?");
                    loadStudent();
                    tblStudent.updateUI();
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to insert");
                }
            } else {
                //update
                if (validStuUpdate()) {
                    studentDAO.update(studentDTO);
                    JOptionPane.showConfirmDialog(this, "Do you want to save?");
                    loadStudent();
                    tblStudent.updateUI();
                } else {
                    JOptionPane.showConfirmDialog(this, "Unable to update");
                }
            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_btnSaveStuActionPerformed

    private void btnFindStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindStudentActionPerformed
        String studentID = txtID.getText();

        String majorStr = "";
        StudentDTO studentDTO = null;
        StudentDAO studentDAO = new StudentDAO();

        try {
            studentDTO = studentDAO.findStudentByID(studentID);
        } catch (Exception e) {
        }

        if (studentDTO != null) {
            try {
                majorStr = majorDAO.findMajorNameByID(studentDTO.getMajorID());
            } catch (Exception e) {
                e.printStackTrace();
            }
            txtID.setText(studentDTO.getStudentID());
            txtName.setText(studentDTO.getFullName());
            txtPhone.setText(studentDTO.getPhone());
            txtEmail.setText(studentDTO.getEmail());
            txtAddress.setText(studentDTO.getAddress());
            txtDOB.setText(studentDTO.getDateOfBirth().toString());
            cbMajor.setSelectedItem(studentDTO.getMajorID() + "-" + majorStr);
        } else {
            JOptionPane.showMessageDialog(this, "No result");
        }
    }//GEN-LAST:event_btnFindStudentActionPerformed

    private void cbMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMajorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMajorActionPerformed

    public boolean validMajor() {
        String code = txtMajorID.getText();
        if (!code.matches("[A-Z]{2}")) {
            JOptionPane.showMessageDialog(rootPane, "Wrong id (please input a string of word, capital and maximum 2 elements, ex: SS/SE/.../) <not white space>");
            txtMajorID.requestFocus();
            return false;
        } else {
            try {
                boolean check = majorDAO.checkID(code);
                if (check == true) {
                    JOptionPane.showMessageDialog(rootPane, "ID already exists");
                    txtMajorID.requestFocus();
                    return false;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }

        }
        String name = txtMajorName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong name, must not be empty and maximum 50 characters");
            txtMajorName.requestFocus();
            return false;
        }
        return true;
    }

    public boolean validMajorUpdate() {
        if (txtMajorID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please select Major to update");
            return false;
        }
        String name = txtMajorName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong name, must not be empty and maximum 50 characters");
            txtMajorName.requestFocus();
            return false;
        }
        return true;
    }

    public boolean validStu() {
        String code = txtID.getText();
        if (!code.matches("[A-Z]{2}[0-9]{6}")) {
            JOptionPane.showMessageDialog(rootPane, "Wrong id! (ex: SExxxxxx) <not white space>");
            txtID.requestFocus();
            return false;
        } else {
            try {
                StudentDAO studentDAO = new StudentDAO();
                boolean check = studentDAO.checkIdStu(code);
                if (check == true) {
                    JOptionPane.showMessageDialog(rootPane, "ID already exists");
                    txtID.requestFocus();
                    return false;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e);
            }
        }

        String email = txtEmail.getText();
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong email, must not be empty.");
            return false;
        } else {
            if (!txtEmail.getText().matches("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                    + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
                JOptionPane.showMessageDialog(rootPane, "Wrong email, must math Abz@gmail.com.");
            }
        }

        String name = txtName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong name, must not be empty and maximum 50 characters");
            txtName.requestFocus();
            return false;
        }

        String unit = txtAddress.getText();
        if (unit.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong address, must not be empty and maximum 50 characters");
            txtAddress.requestFocus();
            return false;
        }

        String dob = txtDOB.getText();
        if (dob.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong dob, must not be empty and maximum 50 characters");
        }

        if(!dob.matches("(\\d{4}-){1}(\\d{2}-){1}(\\d{2}){1}")){
            JOptionPane.showMessageDialog(this, "DOB is formate like YYYY-MM-DD");
        }
        if (txtPhone.getText().matches("[0-9]{10}")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please input a string number [0-9] and lenght = 10");
            txtPhone.requestFocus();
            return false;
        }

    }

    public boolean validStuUpdate() {
        if (txtID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please select Student to update");
            return false;
        }

        String name = txtName.getText();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong name, must not be empty and maximum 50 characters");
            txtName.requestFocus();
            return false;
        }

        String unit = txtAddress.getText();
        if (unit.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong address, must not be empty and maximum 50 characters");
            txtAddress.requestFocus();
            return false;
        }
        String dob = txtDOB.getText();
        if (dob.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Wrong dob, must not be empty and maximum 50 characters");
        }
        if(!dob.matches("(\\d{4}-){1}(\\d{2}-){1}(\\d{2}){1}")){
            JOptionPane.showMessageDialog(this, "DOB is formate like YYYY-MM-DD");
        }

        if (txtPhone.getText().matches("[0-9]{10}")) {
            return true;
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please input a string number [0-9] and lenght = 10");
            txtPhone.requestFocus();
            return false;
        }
    }
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Main().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewMajor;
    private javax.swing.JButton btnAddNewStu;
    private javax.swing.JButton btnDeleteMajor;
    private javax.swing.JButton btnDeleteStu;
    private javax.swing.JButton btnFindStudent;
    private javax.swing.JButton btnSaveMajor;
    private javax.swing.JButton btnSaveStu;
    private javax.swing.JComboBox<String> cbMajor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStudentManager;
    private javax.swing.JTable tblMajor;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtMajorID;
    private javax.swing.JTextField txtMajorName;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
